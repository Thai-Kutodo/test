async function getHtmlCartSection() { var t = await fetch(`${window.Shopify.routes.root}?sections=main-cart-items`), e = await t.json(); return (new DOMParser).parseFromString(e["main-cart-items"], "text/html") } function replaceCartItemPointValues(t = null) { t || (t = getHtmlCartSection()), [...document.querySelectorAll('[data-loyal-target="point-value"]')].forEach((function (e) { var { loyalItemId: o } = e.dataset, n = `[data-loyal-target="point-value"][data-loyal-item-id="${o}"]`; t.querySelector(n).innerHTML = e.innerHTML })) } function cartObserver() { var t = document.querySelector("#cart"); new MutationObserver((function (t, e) { for (var o of t) "attributes" === o.type && o.target.classList.contains("show") && EasyPoints.Register.run() })).observe(t, { attributes: !0, childList: !0, subtree: !0 }) } function cartObserver2() { var t = document.querySelector(".cart__footer"); new MutationObserver((function (t, e) { for (var o of t) "childList" === o.type && o.target.classList.contains("cart__item-count") && (setTimeout((function () { EasyPoints.getDiscountSession() > 0 && document.querySelector(".easy-points-button__reset").click() }), 100), document.querySelectorAll('[data-loyal-target="subtotal"]').forEach((t => { var e = EasyPoints.Points.getPriceFromEl(t, '[data-loyal-target="total_price"]'); EasyPoints.Points.setCost(t.querySelector('[data-loyal-target="total_price"]'), "data-loyal-total-price", { price: e }), EasyPoints.Points.setCurrencyCost(t.querySelector('[data-loyal-target="total-points-value"]'), { price: e }) })), EasyPoints.Points.insertTotalPoints(document), EasyPoints.Cart.setRedemptionForm()) })).observe(t, { attributes: !0, childList: !0, subtree: !0 }) } EasyPointsUI.insertAppliedDiscount = function (t) { var e = EasyPointsCore.Currency.getFormatOptions() || { convert: !0, multiplier: 100 }; document.querySelectorAll(EasyPointsCore.Selectors.TARGETS.APPLIED_DISCOUNT).forEach((o => o.innerHTML = EasyPointsCore.Currency.format(t, e).replace(" JPY", ""))) }, window.addEventListener("DOMContentLoaded", (function () { if (!this.window.location.pathname.match(/\/cart/i)) return setTimeout((function () { EasyPoints.getDiscountSession() > 0 && document.querySelector(".easy-points-button__reset").click() }), 100), EasyPoints.Register.run(), cartObserver(), void cartObserver2(); EasyPoints.Register.run(), cartObserver2() })); var EasyPoints = { Debug: { DEBUG: !1, print: function (t, e = "info") { if (this.DEBUG) switch (t = "[EasyPoints] " + t, e.toLowerCase()) { case "warn": console.warn(t); break; case "error": console.error(t); break; default: console.info(t) } } }, Selectors: { getElementBy$: function (t, e, o = !1) { return (t = o ? t.querySelectorAll(e) : t.querySelector(e)) || EasyPoints.Debug.print("Could not locate " + e, "warn"), t }, getTotalPointsEl: function (t, e = !1) { return this.getElementBy$(t, '[data-loyal-target="total-points-value"]', e) }, getRedeemContainerEl: function (t, e = !1) { return this.getElementBy$(t, ".easy-points-form__container", e) }, getRedeemPointsButtonEl: function (t, e = !1) { return this.getElementBy$(t, ".easy-points-button__redeem", e) }, getResetPointsButtonEl: function (t, e = !1) { return this.getElementBy$(t, ".easy-points-button__reset", e) }, getRedeemPointsInputEl: function (t, e = !1) { return this.getElementBy$(t, ".easy-points-form__input input", e) }, getCheckoutButtonEl: function (t, e = !1) { return this.getElementBy$(t, 'form[action$="/cart"]', e) }, getAdditionalCheckoutButtonEl: function (t, e = !1) { return this.getElementBy$(t, ".additional-checkout-buttons", e) } }, Points: { getExcludedCost: () => Array.from(document.querySelectorAll('[data-loyal-target="point-exclusion"]')).reduce(((t, e) => t + parseInt(e.dataset.loyalCurrencyCost)), 0), getTotalBonusPoints: (t = document) => Array.from(t.querySelectorAll("[data-loyal-bonus-points]")).reduce(((t, e) => { var { bonusPoints: o } = JSON.parse(e.dataset.loyalBonusPoints); return o = parseInt(o), !isNaN(o) && o > 0 ? t + o : t }), 0), insertTotalPoints(t) { EasyPoints.Selectors.getTotalPointsEl(t, !0).forEach((e => { var o = !1, { tax: n } = JSON.parse(e.dataset.loyalOpts), s = parseInt(e.dataset.loyalCurrencyCost); n.awardable && n.included || (o = !0, s = [...document.querySelectorAll('[data-loyal-target="point-value"]')].reduce(((t, e) => { var { loyalCurrencyCost: o, loyalQuantity: n } = e.dataset; return o * n + t }), 0)); s -= EasyPoints.Points.getExcludedCost(), EasyPoints.Points.setCurrencyCost(e, { price: Math.floor(s), ignoreTax: o }), insertPointValue(e); var a = parseInt(e.innerText.replace(/\D/g, "")); isNaN(a) && (a = parseInt(e.textContent.replace(/\D/g, ""))), a += Math.round(EasyPoints.Points.getTotalBonusPoints(t)), insertPointValueIntoElement(e, a) })) }, getPriceFromEl: function (t, e = null, o = /[^\d]/g) { var n = e ? t.querySelector(e) : t; return n ? 100 * parseInt(n.textContent.replace(o, "")) : null }, getTaxedCost: function ({ price: t, tax: e }, o = null) { null !== o && o.dataset.loyalOpts && (e = JSON.parse(o.dataset.loyalOpts).tax); return null === e ? (EasyPoints.Debug.print("Tax object not defined.", "error"), t) : e.included || e.exempt ? t : Math.floor(t * e.rate) }, setCost(t, e, { price: o = null, multiplier: n = 1, ignoreTax: s = !1 }) { if ((o = (null !== o ? o : parseInt(t.dataset.loyalCurrencyCost)) * n) <= 0) t.setAttribute(e, 0); else { if (t.dataset.loyalOpts) { var a = JSON.parse(t.dataset.loyalOpts); s || (o = this.getTaxedCost({ price: o, tax: a.tax })) } t.setAttribute(e, o) } }, setCurrencyCost(t, e) { this.setCost(t, "data-loyal-currency-cost", e) }, resetTargets: function (t = {}, e = null, o = null) { var n = null != o ? o + ' [data-loyal-target="point-value"]' : '[data-loyal-target="point-value"]'; document.querySelectorAll(n).forEach((e => { e.classList.contains("points-after-applied-discount") || this.setCurrencyCost(e, t) })), e ? e() : updateLoyaltyTargets() } }, Cart: { url: function () { return window.location.origin + "/cart.json" }, getFromJSON: function (t) { var e = new XMLHttpRequest; e.onreadystatechange = function () { if (e.readyState === XMLHttpRequest.DONE) { var o = e.status; 0 === o || o >= 200 && o < 400 ? t(JSON.parse(e.responseText)) : EasyPoints.Debug.print("Failed getting data from /cart.json", "error") } }, e.open("GET", this.url()), e.setRequestHeader("accept", "application/json"), e.send() }, setRedemptionForm: function () { this.getFromJSON((function (t) { var e = document.getElementById("point-redemption-form"); e && ((maxRedeemableInput = e.querySelector('input[name="coupon[max_redeemable]"]')) && (maxRedeemableInput.value = t.total_price), t.items.forEach((function (t) { var o = e.querySelectorAll('input[name="coupon[product_ids][]"]'); if (!Array.prototype.find.call(o, (function (e) { return e.value == t.product_id }))) { var n = document.createElement("input"); n.setAttribute("type", "hidden"), n.setAttribute("name", "coupon[product_ids][]"), n.setAttribute("value", t.product_id), e.appendChild(n), EasyPoints.Debug.print("New cart item input created for the submission form.") } }))) })) } }, UI: { showHidden: function () { EasyPoints.Selectors.getElementBy$(document, ".hidden-unless-discount-applied", !0).forEach((t => t.classList.remove("easy-points-hide"))) }, hideHidden: function () { EasyPoints.Selectors.getElementBy$(document, ".hidden-unless-discount-applied", !0).forEach((t => t.classList.add("easy-points-hide"))) }, cloneSubtotal: function () { EasyPoints.Selectors.getElementBy$(document, '[data-loyal-target="subtotal"]', !0).forEach((t => { var e = t.cloneNode(!0); e.removeAttribute("data-loyal-target"), e.setAttribute("data-loyal-clone", "subtotal"), t.classList.add("easy-points-hide"), t.insertAdjacentElement("beforebegin", this.modifySubtotal(e)) })) }, resetClonedSubtotal: function () { EasyPoints.Selectors.getElementBy$(document, "[data-loyal-clone]", !0).forEach((t => t.remove())), EasyPoints.Selectors.getElementBy$(document, '[data-loyal-target="subtotal"]', !0).forEach((t => t.classList.remove("easy-points-hide"))) }, modifySubtotal: function (t) { var e = t.querySelector('[data-loyal-target="total_price"]'); if (!e) return EasyPoints.Debug.print("modifySubtotal(el): missing total price target."), t; var o = EasyPoints.getDiscountSession(), n = e.dataset.loyalTotalPrice, { multiplier: s } = EasyPointsCore.Currency.getFormatOptions() || { multiplier: 100 }, a = n - Math.round(o * EasyPointsCore.Currency.getRate() * s); if (a >= 0) { e.innerHTML = EasyPointsCore.Currency.format(a); var r = t.querySelector(".points-after-applied-discount"); if (r) { var i = parseInt(r.innerText.replace(/\D/g, "")), l = EasyPoints.Points.getTaxedCost({ price: n, tax: null }, r), u = EasyPoints.Points.getTaxedCost({ price: a, tax: null }, r); insertPointValueIntoElement(r, formatBigNumber(Math.max(0, Math.ceil(u / l * i)))) } } return t }, showDiscount: function () { this.showHidden(), this.buttonReset() }, hideDiscount: function () { this.hideHidden(), this.buttonRedeem() }, buttonRedeem: function () { EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => t.removeAttribute("disabled"))), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach((t => t.classList.add("easy-points-hide"))), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach((t => t.classList.remove("easy-points-hide"))) }, buttonReset: function () { EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => { t.setAttribute("disabled", !0); var e = EasyPoints.getDiscountSession(); !t.classList.contains("valid") && ("" == t.value || t.value <= 0) && e > 0 && (t.value = e) })), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach((t => t.classList.remove("easy-points-hide"))), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach((t => t.classList.add("easy-points-hide"))) } }, Tiers: { recalculate: function (t = null) { var { rankAdvancementData: e } = getEasyPointsSession(); if (e && !(e.raw_amount >= 0)) { var o = EasyPoints.getDiscountSession(), { multiplier: n } = EasyPointsCore.Currency.getFormatOptions() || { multiplier: 100 }, s = Math.round(o * EasyPointsCore.Currency.getRate() * n); if (null === t) { var a = document.querySelector('[data-loyal-target="total_price"]'); if (!a) return void EasyPoints.Debug.print("recalculate(el): missing total price target.", "error"); t = a.dataset.loyalTotalPrice } try { var r = EasyPointsCore.Tiers.getNextTier(t - s); r ? (Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-tier-name"]')).forEach((t => { t.textContent = r.name })), Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-amount"]')).forEach((t => { t.innerHTML = EasyPointsCore.Currency.format(r.advancementAmountMultiplied) }))) : Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-data"] > span')).forEach((t => { t.style.display = "max-rank" == t.dataset.loyalTarget ? "" : "none" })) } catch { return void EasyPoints.Debug.print("EasyPoints Tiers: error getting next tier.", "error") } } } }, getDiscountSession: function () { var t = sessionStorage.getItem("appliedDiscount"); return t ? parseInt(t) : 0 }, applyDiscount: function () { var t = this.getDiscountSession(); EasyPoints.Debug.print("Applying discount: " + t), t > 0 && (displayDiscount(t), EasyPoints.UI.showDiscount(), EasyPoints.UI.cloneSubtotal(), EasyPoints.Selectors.getAdditionalCheckoutButtonEl(document, !0).forEach((t => t.classList.add("easy-points-hide")))) }, reset: function ({ event: t = null }) { EasyPoints.UI.hideDiscount(), EasyPoints.UI.resetClonedSubtotal(), EasyPoints.Selectors.getAdditionalCheckoutButtonEl(document, !0).forEach((t => t.classList.remove("easy-points-hide"))), sessionStorage.removeItem("appliedDiscount"), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => t.value = "")) }, Form: { update({ points: t }) { var e = EasyPoints.Selectors.getElementBy$(document, "#redemption-point-value"); return e ? (e.value = t, EasyPointsCore.Validate.pointRedemption() ? (sessionStorage.setItem("appliedDiscount", t), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => t.classList.remove("invalid"))), !0) : (sessionStorage.removeItem("appliedDiscount"), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => t.classList.add("invalid"))), !1)) : (sessionStorage.removeItem("appliedDiscount"), !1) }, redeem({ event: t = null, points: e = null }) { if (null == e) { if (null == t) return EasyPoints.Debug.print("redeem({event, points}): cant get the points value", "error"), !1; var o = t.target.closest(".easy-points-form__container"); if (!o) return EasyPoints.Debug.print("redeem({event, points}): target form is not defined"), !1; (input = EasyPoints.Selectors.getRedeemPointsInputEl(o)) && (input.value = input.value.toString().replace(/[^\d]/g, ""), e = input.value) } return this.update({ points: e }) }, setCoupon(t = null, e = null) { if (null != e && !e || EasyPoints.getDiscountSession() > 0 ? (EasyPoints.Debug.print("Using /redeem"), form = buildForm("/apps/loyalty/redeem")) : (EasyPoints.Debug.print("Using /reset"), form = buildForm("/apps/loyalty/reset")), form) { var o = new XMLHttpRequest; o.onreadystatechange = function (e) { 4 == this.readyState && (EasyPoints.Debug.print("Submitted"), t && t()) }, o.open("POST", form.action); var n = new FormData(form); o.send(n), EasyPoints.Debug.print("Submitting form") } else t && t() } }, Register: { submissionReady: !1, run: function () { updateLoyaltyTargets(), EasyPoints.Points.insertTotalPoints(document), EasyPoints.Tiers.recalculate(), this.setEventListeners(), EasyPoints.applyDiscount() }, setEventListeners: function () { 0 != EasyPoints.Selectors.getRedeemContainerEl(document, !0).length && (EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach((t => { t.addEventListener("focus", this.onPointsInput), t.value > 0 && EasyPoints.Form.update({ points: EasyPoints.getDiscountSession() }) })), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach((t => t.addEventListener("click", this.onClickRedeemBtn))), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach((t => t.addEventListener("click", this.onClickResetBtn))), EasyPoints.Debug.print("Applied all required event listeners")) }, onPointsInput: function (t) { t.target.classList.remove("invalid") }, onClickRedeemBtn: function (t) { (t.preventDefault(), EasyPoints.Debug.print("Clicked: Redeem"), EasyPoints.Register.submissionReady = !1, EasyPoints.Form.redeem({ event: t })) && (t.target.style.cursor = "progress", t.target.classList.add("ep-disabled"), document.querySelector("#checkout").classList.add("ep-disabled"), EasyPoints.Form.setCoupon((function () { EasyPoints.applyDiscount(), t.target.style.cursor = "unset", t.target.classList.remove("ep-disabled"), document.querySelector("#checkout").classList.remove("ep-disabled") }))) }, onClickResetBtn: function (t) { t.preventDefault(), EasyPoints.Debug.print("Clicked: Reset"), EasyPoints.Register.submissionReady = !1, t.target.style.cursor = "progress", t.target.classList.add("ep-disabled"), document.querySelector("#checkout").classList.add("ep-disabled"), sessionStorage.removeItem("appliedDiscount"), EasyPoints.Form.setCoupon((function () { EasyPoints.reset({ event: t }), t.target.style.cursor = "unset", t.target.classList.remove("ep-disabled"), document.querySelector("#checkout").classList.remove("ep-disabled") })) }, onClickSetCoupon(t, e = null) { if (EasyPoints.Debug.print("Clicked: checkout"), EasyPoints.Register.submissionReady) EasyPoints.Debug.print("> ready to checkout"); else { EasyPoints.Debug.print("Setting coupon"), t.preventDefault(), t.stopPropagation(); var o = t.target.querySelector('button[type="submit"]'); o.style.cursor = "progress", o.classList.add("btn--loading"), o.setAttribute("disabled", !0), EasyPoints.Form.setCoupon((function () { EasyPoints.Register.submissionReady = !0, o.style.cursor = "unset", o.classList.remove("btn--loading"), o.removeAttribute("disabled"), o.click(), e && e() })) } } } };