{% comment %}
    Define a list of stores. Then loop through each cart product's tags to see if they are in the stores
    array. If they are, put them in a store_tags array unless it's already there
{% endcomment %}

{% assign stores = '松坂屋名古屋店,ジェイアール名古屋タカシマヤ,星ヶ丘三越ファミリア,名古屋ラシック店,あべのハルカス近鉄本店,近鉄百貨店上本町店ファミリアショップ,髙島屋堺店ファミリアショップ,髙島屋泉北店ファミリアショップ,大丸心斎橋店,大丸梅田店,千里阪急,高槻阪急,京阪百貨店守口店ファミリアショップ,阪急うめだ本店,大阪髙島屋,そごう横浜店,髙島屋横浜店,多摩プラザ店,横浜元町店,博多阪急ファミリアショップ,大丸下関店ファミリアショップ,井筒屋小倉店ファミリアショップ,トキハ本店ファミリアショップ,長崎浜屋ファミリアショップ,福岡岩田屋,大丸京都店,近鉄百貨店和歌山店ファミリアショップ,ジェイアール京都伊勢丹ファミリアショップ,京都髙島屋,奈良近鉄,天満屋倉敷店ファミリアショップ,井筒屋山口店ファミリアショップ,高松三越ファミリアショップ,そごう広島店,髙島屋岡山店,高知大丸ファミリアショップ,天満屋岡山店ファミリアショップ,天満屋福山店ファミリアショップ,広島福屋ファミリア,いよてつ髙島屋ファミリア,伊勢丹新宿店,小田急百貨店新宿店,髙島屋日本橋店,西武池袋本店ファミリアショップ,髙島屋玉川店ファミリアショップ,髙島屋新宿店,松屋銀座店ファミリアショップ,京王百貨店新宿店ファミリアショップ,三越日本橋店,銀座三越ファミリアショップ,東武百貨店池袋店,東急本店,ファミリア自由が丘店,吉祥寺東急,ファミリア広尾店,ファミリア町田小田急店,代官山店,山陽百貨店,西宮阪急,神戸阪急,川西阪急,宝塚阪急,加古川ヤマトヤシキファミリアショップ,ファミリアさんちか店,芦屋モンテメール店,神戸本店,仙台三越ファミリアショップ,さっぽろ東急ファミリア,水戸京成百貨店ファミリアショップ,伊勢丹立川店ファミリアショップ,伊勢丹浦和店ファミリアショップ,髙島屋柏店ファミリアショップ,津松菱ファミリアショップ,大和香林坊店ファミリアショップ,大和富山店ファミリアショップ,松坂屋静岡店ファミリアショップ,ながの東急百貨店ファミリアショップ,新潟伊勢丹ファミリア,三井アウトレットパーク マリンピア神戸ファミリアショップ,三井アウトレットパーク 横浜ベイサイドファミリアショップ' | split: ',' %}
{% assign store_tags = '' %}

{% for item in cart.items %}
    {% for tag in item.product.tags %}
      {% if stores contains tag %}
        {% unless store_tags contains tag %}
            {% assign store_tags = store_tags | append: tag | append: ',' %}
        {% endunless %}
      {% endif %}
    {% endfor %}
{% endfor %}

{% assign store_tags = store_tags | split: ',' %}

{% for store_tag in store_tags %}
    {% for item in cart.items %}
        {% unless item.product.tags contains store_tag %}
            {% assign store_tags = store_tags | remove: store_tag %}
        {% endunless %}
    {% endfor %}
{% endfor %}

<script>
    // convert Liquid strings to JS arrays
    const stores = {{ stores | append: '"' | join: '","' | append: '#END' | remove: '"#END' }};
    let store_tags = {{ store_tags | append: '"' | join: '","' | append: '#END' | remove: '"#END' }};
    store_tags = store_tags.filter((e) => { return e.replace(/(\r\n|\n|\r)/gm,"")});

    // only run the function if any store_tags were found because we don't want to remove any stores otherwise
    if (store_tags.length) {
        // observe the page and wait for the store locator app to load the content before we filter it
        const callback = (mutationsList, observer) => {
            for (const mutation of mutationsList) {
                if (mutation.addedNodes.length && mutation.addedNodes[0].classList.contains('accordion')) {
                    observer.disconnect();
                    const prefectures = [];
                    // remove item if it's not in the store_tags array, store its prefecture in an array if it is
                    $('.store-list__name').each(function() {
                        if (!store_tags.includes($(this).text())) {
                            $(this).parents('.store-list__item').remove();
                        } else {
                            const prefecture = $(this).parents('.store-list__item').data('region_name');
                            if (!prefectures.includes(prefecture)) {
                                prefectures.push(prefecture);
                            }
                        }
                    });
                    // remove accordions that don't have any stores left
                    $('.accordion').each(function() {
                        if (!$(this).find('.store-list__item').length) {
                            $(this).remove();
                        };
                    });
                    // of the remaining prefectures, remove all the ones that aren't in the prefectures array
                    $('.category-tab__item').each(function() {
                        if (!prefectures.includes($(this).find('span').text())) {
                            $(this).remove();
                        }
                    })
                }
            }
        }
        const observer = new MutationObserver(callback);
        observer.observe($('.store-list')[0], { childList: true });
    }
</script>